class ParticleOld:
	def __init__(self, screen, shape, x, y, color, size, should_decrease, decrease, lifetime_min, lifetime_max, gravity):
		self.particles = []

		self.shape = shape # 0 - circle. 1 - square
		self.screen = screen
		self.x = x
		self.y = y
		self.size = size
		self.decrease = decrease
		self.should_decrease = should_decrease
		self.color = color
		self.lifetime_min = lifetime_min
		self.lifetime_max = lifetime_max
		self.gravity = gravity

	def emit(self):
		# if self.particles:
		# 	self.delete_particles()
		# 	for particle in self.particles:
		# 		particle[0][0] += particle[2][0] # move x
		# 		particle[0][1] += particle[2][1] # move y
		# 		if self.should_decrease:
		# 			particle[1] -= self.decrease # decrease size
		# 			if particle[1] <= 0:
		# 				self.particles.remove(particle)
		# 				break

		# 		if self.shape == 0:
		# 			pg.draw.circle(self.screen, self.color, (int(particle[0][0]), int(particle[0][1])), int(particle[1]))
		# 		elif self.shape == 1:
		# 			pg.draw.rect(self.screen, self.color, [int(particle[0][0]), int(particle[0][1]), int(particle[1]), int(particle[1])])

		# 		if self.gravity > 0:
		# 			particle[2] = [particle[2][0] + self.gravity * particle[2][0] / 4, particle[2][1] + self.gravity * particle[2][1] / 4]

		self.delete_particles()
		for p in self.particles:
			p[0][0] += p[2][0] * 0.025 # move x
			p[0][1] += p[2][1] * 0.025 # move y

			if self.should_decrease:
				p[1] /= self.decrease # decrease size
				if p[1] <= 0:
					self.particles.remove(p)
					break
			if self.shape == 0:
				try:
					pg.draw.circle(self.screen, self.color, (int(p[0][0]), int(p[0][1])), int(p[1]))
				except:
					pg.draw.circle(self.screen, self.color, (self.x, self.y), self.size)
			elif self.shape == 1:
				try:
					pg.draw.rect(self.screen, self.color, [int(p[0][0]), int(p[0][1]), int(p[1]), int(p[1])])
				except:
					pg.draw.rect(self.screen, self.color, [self.x, self.y, self.size, self.size])

			# Apply gravity
			p[2][0] = p[2][0] + self.gravity * p[2][0] / 4
			p[2][1] = p[2][1] + self.gravity * p[2][1] / 4

	def add_particles(self):
		pos_x = self.x
		pos_y = self.y
		size = self.size
		direction_x = random.randint(-1,1)
		direction_y = random.randint(-1,1)
		birth = time.time()
		life = random.randint(self.lifetime_min, self.lifetime_max)

		particle_circle = [[int(pos_x), int(pos_y)], size, [direction_x, direction_y], birth, life]
		self.particles.append(particle_circle)

	def delete_particles(self):
		particle_copy = [particle for particle in self.particles if particle[1] > 0 or not (particle[3] - time.time() > particle[4])]
		self.particles = particle_copy
